// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/web3tea/curio-dashboard/types"
)

type ActorDeadline struct {
	Empty      bool `json:"empty"`
	Current    bool `json:"current"`
	Proven     bool `json:"proven"`
	PartFaulty bool `json:"partFaulty"`
	Faulty     bool `json:"faulty"`
}

type Alert struct {
	ID          int    `json:"id"`
	MachineName string `json:"machineName"`
	Message     string `json:"message"`
}

type ChainHead struct {
	Height    uint64 `json:"height"`
	Timestamp uint64 `json:"timestamp"`
}

type CidGravityStatus struct {
	Miner  types.Address `json:"miner"`
	Status bool          `json:"status"`
}

type ClientFilter struct {
	Name               string           `json:"name"`
	Active             bool             `json:"active"`
	Wallets            []*types.Address `json:"wallets"`
	Peers              []*types.PeerID  `json:"peers"`
	PricingFilters     []string         `json:"pricingFilters"`
	MaxDealsPerHour    int              `json:"maxDealsPerHour"`
	MaxDealSizePerHour int              `json:"maxDealSizePerHour"`
	Info               string           `json:"info"`
}

type ClientFilterInput struct {
	Name               string           `json:"name"`
	Active             bool             `json:"active"`
	Wallets            []*types.Address `json:"wallets"`
	Peers              []*types.PeerID  `json:"peers"`
	PricingFilters     []string         `json:"pricingFilters"`
	MaxDealsPerHour    int              `json:"maxDealsPerHour"`
	MaxDealSizePerHour int              `json:"maxDealSizePerHour"`
	Info               string           `json:"info"`
}

type Config struct {
	ID     int              `json:"id"`
	Title  string           `json:"title"`
	Config string           `json:"config"`
	UsedBy []*MachineDetail `json:"usedBy"`
}

type DealCountSummary struct {
	Boost  int `json:"boost"`
	Direct int `json:"direct"`
	Legacy int `json:"legacy"`
}

type DealInfo struct {
	ID                string           `json:"id"`
	SpID              types.ActorID    `json:"spId"`
	Sector            types.NullInt64  `json:"sector"`
	CreatedAt         time.Time        `json:"createdAt"`
	SignedProposalCid string           `json:"signedProposalCid"`
	Offline           bool             `json:"offline"`
	Verified          bool             `json:"verified"`
	StartEpoch        int64            `json:"startEpoch"`
	EndEpoch          int64            `json:"endEpoch"`
	ClientPeerID      types.PeerID     `json:"clientPeerId"`
	ChainDealID       types.NullInt64  `json:"chainDealId"`
	PublishCid        types.NullString `json:"publishCid"`
	PieceCid          string           `json:"pieceCid"`
	PieceSize         int64            `json:"pieceSize"`
	FastRetrieval     bool             `json:"fastRetrieval"`
	AnnounceToIpni    bool             `json:"announceToIpni"`
	URL               types.NullString `json:"url"`
	Urls              string           `json:"urls"`
	URLHeaders        types.JSON       `json:"urlHeaders"`
	Error             string           `json:"error"`
	Miner             string           `json:"miner"`
	IsLegacy          bool             `json:"isLegacy"`
	Indexed           types.NullBool   `json:"indexed"`
	IsDdo             bool             `json:"isDdo"`
}

type DefaultFilterBehaviour struct {
	AllowDealsFromUnknownClients             bool                `json:"allowDealsFromUnknownClients"`
	IsDealRejectedWhenCidGravityNotReachable bool                `json:"isDealRejectedWhenCidGravityNotReachable"`
	IsCidGravityEnabled                      []*CidGravityStatus `json:"isCidGravityEnabled"`
}

type GaugeCountValue struct {
	Key   string `json:"key"`
	Value int    `json:"value"`
}

type IPNIAdvertisement struct {
	OrderNumber    int              `json:"orderNumber"`
	PieceCid       string           `json:"pieceCid"`
	AdCid          string           `json:"adCid"`
	Previous       types.NullString `json:"previous"`
	ContextID      types.Bytes      `json:"contextId"`
	PieceSize      int              `json:"pieceSize"`
	Provider       *IPNIPeerID      `json:"provider" db:"-"`
	ProviderPeerID string           `json:"-" db:"provider"`
	Entries        string           `json:"entries"`
	Addresses      string           `json:"addresses"`
	IsSkip         bool             `json:"isSkip"`
	IsRm           bool             `json:"isRm"`
	Signature      types.Bytes      `json:"signature"`
}

type IPNIHead struct {
	Head     string `json:"head"`
	Provider string `json:"provider"`
}

type IPNIPeerID struct {
	PeerID string        `json:"peerID"`
	SpID   types.ActorID `json:"spID"`
}

type IPNIProvider struct {
	SpID    types.ActorID      `json:"spID"`
	PeerID  string             `json:"peerID"`
	Head    string             `json:"head"`
	AdCount int                `json:"adCount"`
	Status  IPNIProviderStatus `json:"status"`
}

type IPNIStats struct {
	TotalAdvertisements         int `json:"totalAdvertisements"`
	PreviousTotalAdvertisements int `json:"previousTotalAdvertisements"`
	Providers                   int `json:"providers"`
	PreviousProviders           int `json:"previousProviders"`
	Indexed                     int `json:"indexed"`
	PreviousIndexed             int `json:"previousIndexed"`
	Skipped                     int `json:"skipped"`
	PreviousSkipped             int `json:"previousSkipped"`
	PendingTasks                int `json:"pendingTasks"`
	PreviousPendingTasks        int `json:"previousPendingTasks"`
}

type IPNITask struct {
	TaskID       int            `json:"taskId"`
	ContextID    types.Bytes    `json:"contextId"`
	Complete     bool           `json:"complete"`
	IsRm         *bool          `json:"isRm"`
	Sector       *int           `json:"sector"`
	SectorOffset int            `json:"sectorOffset"`
	SpID         *types.ActorID `json:"spId"`
	Provider     *string        `json:"provider"`
	RegSealProof *int           `json:"regSealProof"`
	CreatedAt    *time.Time     `json:"createdAt"`
}

type Machine struct {
	ID            int             `json:"id"`
	LastContact   time.Time       `json:"lastContact"`
	HostAndPort   string          `json:"hostAndPort"`
	CPU           int             `json:"cpu"`
	RAM           int             `json:"ram"`
	Gpu           float64         `json:"gpu"`
	Detail        *MachineDetail  `json:"detail"`
	Tasks         []*Task         `json:"tasks"`
	TaskHistories []*TaskHistory  `json:"taskHistories"`
	Storages      []*StoragePath  `json:"storages"`
	Metrics       *MachineMetrics `json:"metrics"`
}

type MachineDetail struct {
	ID          int              `json:"id"`
	MachineName types.NullString `json:"machineName"`
	Tasks       types.NullString `json:"tasks"`
	TasksArray  []string         `json:"tasksArray"`
	Layers      types.NullString `json:"layers"`
	LayersArray []string         `json:"layersArray"`
	StartupTime types.NullTime   `json:"startupTime"`
	Miners      types.NullString `json:"miners"`
	MinersArray []string         `json:"minersArray"`
	MachineID   types.NullInt64  `json:"machineId"`
}

type MachineMetrics struct {
	CPUUsage                   float64            `json:"cpuUsage"`
	GpuUsage                   float64            `json:"gpuUsage"`
	RAMUsage                   float64            `json:"ramUsage"`
	ActiveTasks                []*GaugeCountValue `json:"activeTasks"`
	AddedTasks                 []*GaugeCountValue `json:"addedTasks"`
	TasksCompleted             []*GaugeCountValue `json:"tasksCompleted"`
	TasksStarted               []*GaugeCountValue `json:"tasksStarted"`
	GoRoutines                 int                `json:"goRoutines"`
	GoVersion                  string             `json:"goVersion"`
	GoThreads                  int                `json:"goThreads"`
	ProcessCPUSecondsTotal     int                `json:"processCpuSecondsTotal"`
	ProcessStartTimeSeconds    int                `json:"processStartTimeSeconds"`
	ProcessVirtualMemoryBytes  int                `json:"processVirtualMemoryBytes"`
	ProcessResidentMemoryBytes int                `json:"processResidentMemoryBytes"`
	ProcessOpenFds             int                `json:"processOpenFds"`
	ProcessMaxFds              int                `json:"processMaxFds"`
}

type MachineSummary struct {
	Total            int       `json:"total"`
	TotalUp          int       `json:"totalUp"`
	TotalDown        int       `json:"totalDown"`
	UniqueHostsTotal int       `json:"uniqueHostsTotal"`
	UniqueHostsUp    int       `json:"uniqueHostsUp"`
	UniqueHostsDown  int       `json:"uniqueHostsDown"`
	TotalRAM         int       `json:"totalRam"`
	TotalCPU         int       `json:"totalCpu"`
	TotalGpu         float64   `json:"totalGpu"`
	UpdatedAt        time.Time `json:"updatedAt"`
}

type MarketAllowFilter struct {
	Wallet types.Address `json:"wallet"`
	Status bool          `json:"status"`
}

type MarketBalance struct {
	Miner    types.Address    `json:"miner"`
	Balance  types.FIL        `json:"balance"`
	Balances []*WalletBalance `json:"balances"`
}

type MarketMk12Deal struct {
	UUID              string           `json:"uuid"`
	SpID              types.ActorID    `json:"spId"`
	CreatedAt         time.Time        `json:"createdAt"`
	SignedProposalCid string           `json:"signedProposalCid"`
	ProposalSignature types.Bytes      `json:"proposalSignature"`
	Proposal          types.JSON       `json:"proposal"`
	Offline           bool             `json:"offline"`
	Verified          bool             `json:"verified"`
	StartEpoch        int64            `json:"startEpoch"`
	EndEpoch          int64            `json:"endEpoch"`
	ClientPeerID      string           `json:"clientPeerId"`
	ChainDealID       types.NullInt64  `json:"chainDealId"`
	PublishCid        types.NullString `json:"publishCid"`
	PieceCid          string           `json:"pieceCid"`
	PieceSize         uint64           `json:"pieceSize"`
	FastRetrieval     bool             `json:"fastRetrieval"`
	AnnounceToIpni    bool             `json:"announceToIpni"`
	URL               types.NullString `json:"url"`
	URLHeaders        types.JSON       `json:"urlHeaders"`
	Error             types.NullString `json:"error"`
	Label             types.Bytes      `json:"label"`
	ProposalCid       string           `json:"proposalCid"`
}

type MarketMk12DealFilterInput struct {
	SpID              *types.ActorID `json:"spId"`
	UUID              *string        `json:"uuid"`
	SignedProposalCid *string        `json:"signedProposalCid"`
	ProposalCid       *string        `json:"proposalCid"`
	PieceCid          *string        `json:"pieceCid"`
}

type MarketMk12StorageAsk struct {
	SpID          types.Address `json:"spId"`
	Price         int           `json:"price"`
	VerifiedPrice int           `json:"verifiedPrice"`
	MinSize       int           `json:"minSize"`
	MaxSize       int           `json:"maxSize"`
	CreatedAt     int           `json:"createdAt"`
	Expiry        int           `json:"expiry"`
	Sequence      int           `json:"sequence"`
}

type MarketMk12StorageAskInput struct {
	SpID          types.Address `json:"spId"`
	Price         int           `json:"price"`
	VerifiedPrice int           `json:"verifiedPrice"`
	MinSize       int           `json:"minSize"`
	MaxSize       int           `json:"maxSize"`
	Expiry        int           `json:"expiry"`
}

type MessageSend struct {
	FromKey      string      `json:"fromKey"`
	ToAddr       string      `json:"toAddr"`
	SendReason   string      `json:"sendReason"`
	SendTaskID   int         `json:"sendTaskId"`
	UnsignedData types.Bytes `json:"unsignedData"`
	UnsignedCid  string      `json:"unsignedCid"`
	Nonce        *int        `json:"nonce"`
	SignedData   types.Bytes `json:"signedData"`
	SignedJSON   *types.JSON `json:"signedJson"`
	SignedCid    *string     `json:"signedCid"`
	SendTime     *time.Time  `json:"sendTime"`
	SendSuccess  *bool       `json:"sendSuccess"`
	SendError    *string     `json:"sendError"`
}

type MessageWait struct {
	SignedMessageCid     string      `json:"signedMessageCid"`
	WaiterMachineID      *int        `json:"waiterMachineId"`
	WaiterMachine        *Machine    `json:"waiterMachine"`
	ExecutedTskCid       *string     `json:"executedTskCid"`
	ExecutedTskEpoch     *int64      `json:"executedTskEpoch"`
	ExecutedMsgCid       *string     `json:"executedMsgCid"`
	ExecutedMsgData      *types.JSON `json:"executedMsgData"`
	ExecutedRcptExitcode *int64      `json:"executedRcptExitcode"`
	ExecutedRcptReturn   types.Bytes `json:"executedRcptReturn"`
	ExecutedRcptGasUsed  *int64      `json:"executedRcptGasUsed"`
	CreatedAt            time.Time   `json:"createdAt"`
}

type Metadata struct {
	NetworkName      string `json:"networkName"`
	GenesisTimestamp uint64 `json:"genesisTimestamp"`
}

type MinerBeneficiaryTerm struct {
	Quota      types.BigInt `json:"quota"`
	UsedQuota  types.BigInt `json:"usedQuota"`
	Expiration int          `json:"expiration"`
}

type MinerInfo struct {
	Owner                      types.Address                  `json:"owner"`
	Worker                     types.Address                  `json:"worker"`
	NewWorker                  types.Address                  `json:"newWorker"`
	ControlAddresses           []*types.Address               `json:"controlAddresses"`
	WorkerChangeEpoch          int                            `json:"workerChangeEpoch"`
	PeerID                     string                         `json:"peerId"`
	MultiAddrs                 []string                       `json:"multiAddrs"`
	WindowPoStProofType        int                            `json:"windowPoStProofType"`
	SectorSize                 int                            `json:"sectorSize"`
	WindowPoStPartitionSectors int                            `json:"windowPoStPartitionSectors"`
	ConsensusFaultElapsed      int                            `json:"consensusFaultElapsed"`
	PendingOwnerAddress        types.Address                  `json:"pendingOwnerAddress"`
	Beneficiary                types.Address                  `json:"beneficiary"`
	BeneficiaryTerm            *MinerBeneficiaryTerm          `json:"beneficiaryTerm"`
	PendingBeneficiaryChange   *MinerPendingBeneficiaryChange `json:"pendingBeneficiaryChange"`
}

type MinerPendingBeneficiaryChange struct {
	NewBeneficiary        types.Address `json:"newBeneficiary"`
	NewQuota              types.BigInt  `json:"newQuota"`
	NewExpiration         int           `json:"newExpiration"`
	ApprovedByBeneficiary bool          `json:"approvedByBeneficiary"`
	ApprovedByNominee     bool          `json:"approvedByNominee"`
}

type MinerPower struct {
	ID          string      `json:"id"`
	MinerPower  *PowerClaim `json:"minerPower"`
	TotalPower  *PowerClaim `json:"totalPower"`
	HasMinPower bool        `json:"hasMinPower"`
}

type MiningCount struct {
	Include int `json:"include"`
	Exclude int `json:"exclude"`
}

type MiningCountAggregated struct {
	Time     time.Time `json:"time"`
	Total    int       `json:"total"`
	Won      int       `json:"won"`
	Included int       `json:"included"`
}

type MiningCountSummary struct {
	Start    time.Time           `json:"start"`
	End      time.Time           `json:"end"`
	Total    int                 `json:"total"`
	Won      int                 `json:"won"`
	Included int                 `json:"included"`
	Actor    *types.Address      `json:"-"`
	Previous *MiningCountSummary `json:"previous"`
}

type MiningStatusSummay struct {
	Total         int             `json:"total"`
	Won           int             `json:"won"`
	Included      int             `json:"included"`
	WonChangeRate float64         `json:"wonChangeRate"`
	LastMinedAt   types.NullInt64 `json:"lastMinedAt"`
}

type MiningSummaryDay struct {
	Day      time.Time     `json:"day"`
	Miner    types.Address `json:"miner"`
	WonBlock int           `json:"wonBlock"`
}

type MiningTask struct {
	TaskID          string        `json:"taskId"`
	SpID            types.Address `json:"spId"`
	Epoch           int           `json:"epoch"`
	BaseComputeTime time.Time     `json:"baseComputeTime"`
	Won             bool          `json:"won"`
	MinedCid        *string       `json:"minedCid"`
	MinedHeader     *types.JSON   `json:"minedHeader"`
	MinedAt         *time.Time    `json:"minedAt"`
	SubmittedAt     *time.Time    `json:"submittedAt"`
	Included        *bool         `json:"included"`
}

type Mutation struct {
}

type NodeHealthSummary struct {
	OnlineNodes      int `json:"onlineNodes"`
	UnscheduledNodes int `json:"unscheduledNodes"`
	OfflineNodes     int `json:"offlineNodes"`
}

type NodeInfo struct {
	ID        string   `json:"id"`
	Address   string   `json:"address"`
	Layers    []string `json:"layers"`
	Reachable bool     `json:"reachable"`
	SyncState string   `json:"syncState"`
	Version   string   `json:"version"`
}

type OpenSectorPiece struct {
	SpID                          types.Address `json:"spID"`
	SectorNumber                  int           `json:"sectorNumber"`
	PieceIndex                    int           `json:"pieceIndex"`
	PieceCid                      string        `json:"pieceCID"`
	PieceSize                     int           `json:"pieceSize"`
	DataURL                       string        `json:"dataURL"`
	DataHeaders                   types.JSON    `json:"dataHeaders"`
	DataRawSize                   int           `json:"dataRawSize"`
	DataDeleteOnFinalize          bool          `json:"dataDeleteOnFinalize"`
	F05PublishCid                 *string       `json:"f05PublishCID"`
	F05DealID                     *int          `json:"f05DealID"`
	F05DealProposal               *types.JSON   `json:"f05DealProposal"`
	F05DealStartEpoch             *int          `json:"f05DealStartEpoch"`
	F05DealEndEpoch               *int          `json:"f05DealEndEpoch"`
	DirectStartEpoch              *int          `json:"directStartEpoch"`
	DirectEndEpoch                *int          `json:"directEndEpoch"`
	DirectPieceActivationManifest *types.JSON   `json:"directPieceActivationManifest"`
	CreatedAt                     time.Time     `json:"createdAt"`
	IsSnap                        bool          `json:"isSnap"`
}

type PipelineSummary struct {
	ID           types.Address `json:"id" db:"sp_id"`
	Sdr          int           `json:"sdr"`
	Trees        int           `json:"trees"`
	PrecommitMsg int           `json:"precommitMsg"`
	WaitSeed     int           `json:"waitSeed"`
	Porep        int           `json:"porep"`
	CommitMsg    int           `json:"commitMsg"`
	Done         int           `json:"done"`
	Failed       int           `json:"failed"`
}

type Porep struct {
	ID                       string              `json:"id"`
	SpID                     types.Address       `json:"spId"`
	SectorNumber             int                 `json:"sectorNumber"`
	CreateTime               time.Time           `json:"createTime"`
	RegSealProof             int                 `json:"regSealProof"`
	TicketEpoch              *int                `json:"ticketEpoch"`
	TicketValue              types.Bytes         `json:"ticketValue"`
	TaskIDSdr                *int                `json:"taskIdSdr"`
	AfterSdr                 bool                `json:"afterSdr"`
	TreeDCid                 *string             `json:"treeDCid"`
	TaskIDTreeD              *int                `json:"taskIdTreeD"`
	AfterTreeD               bool                `json:"afterTreeD"`
	TaskIDTreeC              *int                `json:"taskIdTreeC"`
	AfterTreeC               bool                `json:"afterTreeC"`
	TreeRCid                 *string             `json:"treeRCid"`
	TaskIDTreeR              *int                `json:"taskIdTreeR"`
	AfterTreeR               bool                `json:"afterTreeR"`
	PrecommitMsgCid          *string             `json:"precommitMsgCid"`
	TaskIDPrecommitMsg       *int                `json:"taskIdPrecommitMsg"`
	AfterPrecommitMsg        bool                `json:"afterPrecommitMsg"`
	SeedEpoch                *int                `json:"seedEpoch"`
	PrecommitMsgTsk          types.Bytes         `json:"precommitMsgTsk"`
	AfterPrecommitMsgSuccess bool                `json:"afterPrecommitMsgSuccess"`
	SeedValue                types.Bytes         `json:"seedValue"`
	TaskIDPorep              *int                `json:"taskIdPorep"`
	PorepProof               types.Bytes         `json:"porepProof"`
	AfterPorep               bool                `json:"afterPorep"`
	TaskIDFinalize           *int                `json:"taskIdFinalize"`
	AfterFinalize            bool                `json:"afterFinalize"`
	TaskIDMoveStorage        *int                `json:"taskIdMoveStorage"`
	AfterMoveStorage         bool                `json:"afterMoveStorage"`
	CommitMsgCid             *string             `json:"commitMsgCid"`
	TaskIDCommitMsg          *int                `json:"taskIdCommitMsg"`
	AfterCommitMsg           bool                `json:"afterCommitMsg"`
	CommitMsgTsk             types.Bytes         `json:"commitMsgTsk"`
	AfterCommitMsgSuccess    bool                `json:"afterCommitMsgSuccess"`
	Failed                   bool                `json:"failed"`
	FailedAt                 *time.Time          `json:"failedAt"`
	FailedReason             string              `json:"failedReason"`
	FailedReasonMsg          string              `json:"failedReasonMsg"`
	TaskIDSynth              *int                `json:"taskIdSynth"`
	AfterSynth               bool                `json:"afterSynth"`
	UserSectorDurationEpochs *int                `json:"userSectorDurationEpochs"`
	PrecommitReadyAt         *time.Time          `json:"precommitReadyAt"`
	CommitReadyAt            *time.Time          `json:"commitReadyAt"`
	Status                   TaskStatus          `json:"status"`
	Stage                    PorepStage          `json:"stage"`
	CurrentTask              *Task               `json:"currentTask"`
	CompactStages            []*TaskCompactStage `json:"compactStages"`
}

type PowerClaim struct {
	RawBytePower    *types.BigInt `json:"rawBytePower"`
	QualityAdjPower *types.BigInt `json:"qualityAdjPower"`
}

type PriceFilter struct {
	Name            string `json:"name"`
	MinDurationDays int    `json:"minDurationDays"`
	MaxDurationDays int    `json:"maxDurationDays"`
	MinimumSize     int    `json:"minimumSize"`
	MaximumSize     int    `json:"maximumSize"`
	Price           int    `json:"price"`
	Verified        bool   `json:"verified"`
}

type PriceFilterInput struct {
	Name            string `json:"name"`
	MinDurationDays int    `json:"minDurationDays"`
	MaxDurationDays int    `json:"maxDurationDays"`
	MinimumSize     int    `json:"minimumSize"`
	MaximumSize     int    `json:"maximumSize"`
	Price           int    `json:"price"`
	Verified        bool   `json:"verified"`
}

type PrometheusResponse struct {
	Data types.JSON `json:"data"`
}

type Query struct {
}

type RunningTaskSummary struct {
	Running         int     `json:"running"`
	Queued          int     `json:"queued"`
	AverageWaitTime float64 `json:"averageWaitTime"`
}

type Sector struct {
	ID        string             `json:"id" db:"-"`
	SpID      types.Address      `json:"spID"`
	SectorNum int                `json:"sectorNum"`
	Status    TaskStatus         `json:"status"`
	Meta      *SectorMeta        `json:"meta"`
	Porep     *Porep             `json:"porep"`
	Locations []*SectorLocation  `json:"locations"`
	Pieces    []*SectorMetaPiece `json:"pieces"`
	Tasks     []*Task            `json:"tasks"`
	Events    []*TaskHistory     `json:"events"`
}

type SectorLocation struct {
	MinerID        types.Address    `json:"minerId"`
	SectorNum      int              `json:"sectorNum"`
	SectorFiletype int              `json:"sectorFiletype"`
	StorageID      string           `json:"storageId"`
	IsPrimary      types.NullBool   `json:"isPrimary"`
	ReadTs         types.NullString `json:"readTs"`
	ReadRefs       int              `json:"readRefs"`
	WriteTs        types.NullString `json:"writeTs"`
	WriteLockOwner types.NullString `json:"writeLockOwner"`
	Storage        *Storage         `json:"storage" db:"-"`
}

type SectorMeta struct {
	ID              string           `json:"id" db:"-"`
	SpID            types.Address    `json:"spId"`
	SectorNum       int              `json:"sectorNum"`
	RegSealProof    int              `json:"regSealProof"`
	TicketEpoch     int              `json:"ticketEpoch"`
	TicketValue     types.Bytes      `json:"ticketValue"`
	OrigSealedCid   string           `json:"origSealedCid"`
	OrigUnsealedCid string           `json:"origUnsealedCid"`
	CurSealedCid    string           `json:"curSealedCid"`
	CurUnsealedCid  string           `json:"curUnsealedCid"`
	MsgCidPrecommit types.NullString `json:"msgCidPrecommit"`
	MsgCidCommit    types.NullString `json:"msgCidCommit"`
	MsgCidUpdate    types.NullString `json:"msgCidUpdate"`
	SeedEpoch       int              `json:"seedEpoch"`
	SeedValue       types.Bytes      `json:"seedValue"`
	ExpirationEpoch types.NullInt64  `json:"expirationEpoch"`
	IsCc            bool             `json:"isCC"`
	Deadline        types.NullInt64  `json:"deadline"`
	Partition       types.NullInt64  `json:"partition"`
}

type SectorMetaPiece struct {
	SpID              types.Address `json:"spID"`
	SectorNum         int           `json:"sectorNum"`
	PieceNum          int           `json:"pieceNum"`
	PieceCid          string        `json:"pieceCID"`
	PieceSize         int           `json:"pieceSize"`
	RequestedKeepData bool          `json:"requestedKeepData"`
	RawDataSize       *int          `json:"rawDataSize"`
	StartEpoch        *int          `json:"startEpoch"`
	OrigEndEpoch      *int          `json:"origEndEpoch"`
	F05DealID         *int          `json:"f05DealID"`
	DdoPam            *types.JSON   `json:"ddoPam"`
	F05DealProposal   *types.JSON   `json:"f05DealProposal"`
}

type SectorSummary struct {
	Active  int `json:"active"`
	Sealing int `json:"sealing"`
	Failed  int `json:"failed"`
}

type Storage struct {
	ID       string           `json:"id"`
	Path     *StoragePath     `json:"path"`
	Liveness *StorageLiveness `json:"liveness"`
}

type StorageLiveness struct {
	StorageID      string     `json:"storageId"`
	URL            string     `json:"url"`
	LastChecked    time.Time  `json:"lastChecked"`
	LastLive       *time.Time `json:"lastLive"`
	LastDead       *time.Time `json:"lastDead"`
	LastDeadReason *string    `json:"lastDeadReason"`
}

type StoragePath struct {
	ID            string           `json:"id"`
	StorageID     types.NullString `json:"storageId"`
	Type          StorageType      `json:"type"`
	Urls          types.NullString `json:"urls"`
	Weight        types.NullInt64  `json:"weight"`
	MaxStorage    types.NullInt64  `json:"maxStorage"`
	CanSeal       types.NullBool   `json:"canSeal"`
	CanStore      types.NullBool   `json:"canStore"`
	Groups        types.NullString `json:"groups"`
	AllowTo       types.NullString `json:"allowTo"`
	AllowTypes    types.NullString `json:"allowTypes"`
	DenyTypes     types.NullString `json:"denyTypes"`
	Capacity      types.NullInt64  `json:"capacity"`
	Available     types.NullInt64  `json:"available"`
	FsAvailable   types.NullInt64  `json:"fsAvailable"`
	Reserved      types.NullInt64  `json:"reserved"`
	Used          types.NullInt64  `json:"used"`
	LastHeartbeat types.NullTime   `json:"lastHeartbeat"`
	HeartbeatErr  types.NullString `json:"heartbeatErr"`
	AllowMiners   types.NullString `json:"allowMiners"`
	DenyMiners    types.NullString `json:"denyMiners"`
}

type StorageStats struct {
	Type             StorageType `json:"type"`
	TotalCapacity    int64       `json:"totalCapacity"`
	TotalAvailable   int64       `json:"totalAvailable"`
	TotalUsed        int64       `json:"totalUsed"`
	TotalReserved    int64       `json:"totalReserved"`
	TotalFsAvailable int64       `json:"totalFsAvailable"`
}

type StorageUsage struct {
	Time        time.Time `json:"time"`
	Available   int64     `json:"available"`
	Used        int64     `json:"used"`
	Reserved    int64     `json:"reserved"`
	FsAvailable int64     `json:"fsAvailable"`
}

type Subscription struct {
}

type Task struct {
	ID             int            `json:"id"`
	InitiatedByID  *int           `json:"initiatedByID" db:"initiated_by"`
	InitiatedBy    *Machine       `json:"initiatedBy"`
	UpdateTime     time.Time      `json:"updateTime"`
	PostedTime     time.Time      `json:"postedTime"`
	OwnerID        *int           `json:"ownerId"`
	Owner          *Machine       `json:"owner"`
	AddedByID      int            `json:"addedByID" db:"added_by"`
	AddedBy        *Machine       `json:"addedBy"`
	PreviousTaskID *int           `json:"previousTaskID" db:"previous_task"`
	PreviousTask   *TaskHistory   `json:"previousTask"`
	Name           string         `json:"name"`
	Histories      []*TaskHistory `json:"histories"`
}

type TaskAggregate struct {
	Time    time.Time `json:"time"`
	Total   int       `json:"total"`
	Success int       `json:"success"`
	Failure int       `json:"failure"`
}

type TaskCompactStage struct {
	Name   string     `json:"name"`
	Status TaskStatus `json:"status"`
	TaskID *int       `json:"taskId"`
}

type TaskDurationStats struct {
	Name                  string  `json:"name"`
	TotalTasks            int     `json:"totalTasks"`
	MinDurationSeconds    float64 `json:"minDurationSeconds"`
	MaxDurationSeconds    float64 `json:"maxDurationSeconds"`
	AvgDurationSeconds    float64 `json:"avgDurationSeconds"`
	MedianDurationSeconds float64 `json:"medianDurationSeconds"`
	P90DurationSeconds    float64 `json:"p90DurationSeconds"`
	P95DurationSeconds    float64 `json:"p95DurationSeconds"`
	P99DurationSeconds    float64 `json:"p99DurationSeconds"`
}

type TaskHistory struct {
	ID                     int       `json:"id"`
	TaskID                 int       `json:"taskId"`
	Name                   string    `json:"name"`
	Posted                 time.Time `json:"posted"`
	WorkStart              time.Time `json:"workStart"`
	WorkEnd                time.Time `json:"workEnd"`
	Result                 bool      `json:"result"`
	Err                    *string   `json:"err"`
	CompletedByHostAndPort string    `json:"completedByHostAndPort"`
	CompletedBy            *Machine  `json:"completedBy"`
}

type TaskNameAggregate struct {
	Name    string `json:"name"`
	Total   int    `json:"total"`
	Success int    `json:"success"`
	Failure int    `json:"failure"`
}

type TaskStats struct {
	Name    string `json:"name"`
	Total   int    `json:"total"`
	Success int    `json:"success"`
	Failure int    `json:"failure"`
}

type TaskSuccessRate struct {
	Total       int     `json:"total"`
	Success     int     `json:"success"`
	Failure     int     `json:"failure"`
	SuccessRate float64 `json:"successRate"`
}

type TaskSummary struct {
	Name       string `json:"name"`
	TrueCount  int    `json:"trueCount"`
	FalseCount int    `json:"falseCount"`
	TotalCount int    `json:"totalCount"`
}

type TaskSummaryDay struct {
	Day        time.Time `json:"day"`
	TrueCount  int       `json:"trueCount"`
	FalseCount int       `json:"falseCount"`
	TotalCount int       `json:"totalCount"`
}

type WalletBalance struct {
	Address types.Address `json:"address"`
	Balance types.FIL     `json:"balance"`
}

type WdpostProofs struct {
	ID                 string        `json:"id" db:"-"`
	SpID               types.Address `json:"spId"`
	ProvingPeriodStart int           `json:"provingPeriodStart"`
	Deadline           int           `json:"deadline"`
	Partition          int           `json:"partition"`
	SubmitAtEpoch      int           `json:"submitAtEpoch"`
	SubmitByEpoch      int           `json:"submitByEpoch"`
	ProofParams        types.Bytes   `json:"proofParams"`
	SubmitTaskID       *int          `json:"submitTaskId"`
	MessageCid         *string       `json:"messageCid"`
	TestTaskID         *int          `json:"testTaskId"`
}

type IPNIProviderStatus string

const (
	IPNIProviderStatusActive   IPNIProviderStatus = "ACTIVE"
	IPNIProviderStatusInactive IPNIProviderStatus = "INACTIVE"
	IPNIProviderStatusUnknown  IPNIProviderStatus = "UNKNOWN"
)

var AllIPNIProviderStatus = []IPNIProviderStatus{
	IPNIProviderStatusActive,
	IPNIProviderStatusInactive,
	IPNIProviderStatusUnknown,
}

func (e IPNIProviderStatus) IsValid() bool {
	switch e {
	case IPNIProviderStatusActive, IPNIProviderStatusInactive, IPNIProviderStatusUnknown:
		return true
	}
	return false
}

func (e IPNIProviderStatus) String() string {
	return string(e)
}

func (e *IPNIProviderStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IPNIProviderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IPNIProviderStatus", str)
	}
	return nil
}

func (e IPNIProviderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MiningTaskAggregateInterval string

const (
	MiningTaskAggregateIntervalDay  MiningTaskAggregateInterval = "day"
	MiningTaskAggregateIntervalHour MiningTaskAggregateInterval = "hour"
)

var AllMiningTaskAggregateInterval = []MiningTaskAggregateInterval{
	MiningTaskAggregateIntervalDay,
	MiningTaskAggregateIntervalHour,
}

func (e MiningTaskAggregateInterval) IsValid() bool {
	switch e {
	case MiningTaskAggregateIntervalDay, MiningTaskAggregateIntervalHour:
		return true
	}
	return false
}

func (e MiningTaskAggregateInterval) String() string {
	return string(e)
}

func (e *MiningTaskAggregateInterval) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MiningTaskAggregateInterval(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MiningTaskAggregateInterval", str)
	}
	return nil
}

func (e MiningTaskAggregateInterval) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PorepStage string

const (
	PorepStageSdr              PorepStage = "SDR"
	PorepStageTreeD            PorepStage = "TreeD"
	PorepStageTreeC            PorepStage = "TreeC"
	PorepStageTreeR            PorepStage = "TreeR"
	PorepStageSynthetic        PorepStage = "Synthetic"
	PorepStagePrecommitMsg     PorepStage = "PrecommitMsg"
	PorepStagePrecommitMsgWait PorepStage = "PrecommitMsgWait"
	PorepStageWaitSeed         PorepStage = "WaitSeed"
	PorepStagePorep            PorepStage = "Porep"
	PorepStageCommitMsg        PorepStage = "CommitMsg"
	PorepStageCommitMsgWait    PorepStage = "CommitMsgWait"
	PorepStageFinalize         PorepStage = "Finalize"
	PorepStageMoveStorage      PorepStage = "MoveStorage"
)

var AllPorepStage = []PorepStage{
	PorepStageSdr,
	PorepStageTreeD,
	PorepStageTreeC,
	PorepStageTreeR,
	PorepStageSynthetic,
	PorepStagePrecommitMsg,
	PorepStagePrecommitMsgWait,
	PorepStageWaitSeed,
	PorepStagePorep,
	PorepStageCommitMsg,
	PorepStageCommitMsgWait,
	PorepStageFinalize,
	PorepStageMoveStorage,
}

func (e PorepStage) IsValid() bool {
	switch e {
	case PorepStageSdr, PorepStageTreeD, PorepStageTreeC, PorepStageTreeR, PorepStageSynthetic, PorepStagePrecommitMsg, PorepStagePrecommitMsgWait, PorepStageWaitSeed, PorepStagePorep, PorepStageCommitMsg, PorepStageCommitMsgWait, PorepStageFinalize, PorepStageMoveStorage:
		return true
	}
	return false
}

func (e PorepStage) String() string {
	return string(e)
}

func (e *PorepStage) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PorepStage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PorepStage", str)
	}
	return nil
}

func (e PorepStage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleUser     Role = "USER"
	RoleOperator Role = "OPERATOR"
	RoleAdmin    Role = "ADMIN"
)

var AllRole = []Role{
	RoleUser,
	RoleOperator,
	RoleAdmin,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleUser, RoleOperator, RoleAdmin:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StorageType string

const (
	StorageTypeHybrid   StorageType = "Hybrid"
	StorageTypeSeal     StorageType = "Seal"
	StorageTypeStore    StorageType = "Store"
	StorageTypeReadonly StorageType = "Readonly"
)

var AllStorageType = []StorageType{
	StorageTypeHybrid,
	StorageTypeSeal,
	StorageTypeStore,
	StorageTypeReadonly,
}

func (e StorageType) IsValid() bool {
	switch e {
	case StorageTypeHybrid, StorageTypeSeal, StorageTypeStore, StorageTypeReadonly:
		return true
	}
	return false
}

func (e StorageType) String() string {
	return string(e)
}

func (e *StorageType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StorageType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StorageType", str)
	}
	return nil
}

func (e StorageType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskHistoriesAggregateInterval string

const (
	TaskHistoriesAggregateIntervalDay  TaskHistoriesAggregateInterval = "day"
	TaskHistoriesAggregateIntervalHour TaskHistoriesAggregateInterval = "hour"
)

var AllTaskHistoriesAggregateInterval = []TaskHistoriesAggregateInterval{
	TaskHistoriesAggregateIntervalDay,
	TaskHistoriesAggregateIntervalHour,
}

func (e TaskHistoriesAggregateInterval) IsValid() bool {
	switch e {
	case TaskHistoriesAggregateIntervalDay, TaskHistoriesAggregateIntervalHour:
		return true
	}
	return false
}

func (e TaskHistoriesAggregateInterval) String() string {
	return string(e)
}

func (e *TaskHistoriesAggregateInterval) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskHistoriesAggregateInterval(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskHistoriesAggregateInterval", str)
	}
	return nil
}

func (e TaskHistoriesAggregateInterval) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskStatus string

const (
	TaskStatusPending   TaskStatus = "Pending"
	TaskStatusRunning   TaskStatus = "Running"
	TaskStatusCompleted TaskStatus = "Completed"
	TaskStatusFailed    TaskStatus = "Failed"
)

var AllTaskStatus = []TaskStatus{
	TaskStatusPending,
	TaskStatusRunning,
	TaskStatusCompleted,
	TaskStatusFailed,
}

func (e TaskStatus) IsValid() bool {
	switch e {
	case TaskStatusPending, TaskStatusRunning, TaskStatusCompleted, TaskStatusFailed:
		return true
	}
	return false
}

func (e TaskStatus) String() string {
	return string(e)
}

func (e *TaskStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskStatus", str)
	}
	return nil
}

func (e TaskStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TimeRangeType string

const (
	TimeRangeTypeHour1  TimeRangeType = "HOUR_1"
	TimeRangeTypeHour24 TimeRangeType = "HOUR_24"
	TimeRangeTypeDay7   TimeRangeType = "DAY_7"
	TimeRangeTypeDay30  TimeRangeType = "DAY_30"
	TimeRangeTypeDay90  TimeRangeType = "DAY_90"
	TimeRangeTypeDay180 TimeRangeType = "DAY_180"
	TimeRangeTypeDay365 TimeRangeType = "DAY_365"
)

var AllTimeRangeType = []TimeRangeType{
	TimeRangeTypeHour1,
	TimeRangeTypeHour24,
	TimeRangeTypeDay7,
	TimeRangeTypeDay30,
	TimeRangeTypeDay90,
	TimeRangeTypeDay180,
	TimeRangeTypeDay365,
}

func (e TimeRangeType) IsValid() bool {
	switch e {
	case TimeRangeTypeHour1, TimeRangeTypeHour24, TimeRangeTypeDay7, TimeRangeTypeDay30, TimeRangeTypeDay90, TimeRangeTypeDay180, TimeRangeTypeDay365:
		return true
	}
	return false
}

func (e TimeRangeType) String() string {
	return string(e)
}

func (e *TimeRangeType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TimeRangeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TimeRangeType", str)
	}
	return nil
}

func (e TimeRangeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TrendType string

const (
	TrendTypeUp      TrendType = "UP"
	TrendTypeDown    TrendType = "DOWN"
	TrendTypeWarning TrendType = "WARNING"
	TrendTypeNormal  TrendType = "NORMAL"
	TrendTypeGood    TrendType = "GOOD"
)

var AllTrendType = []TrendType{
	TrendTypeUp,
	TrendTypeDown,
	TrendTypeWarning,
	TrendTypeNormal,
	TrendTypeGood,
}

func (e TrendType) IsValid() bool {
	switch e {
	case TrendTypeUp, TrendTypeDown, TrendTypeWarning, TrendTypeNormal, TrendTypeGood:
		return true
	}
	return false
}

func (e TrendType) String() string {
	return string(e)
}

func (e *TrendType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TrendType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TrendType", str)
	}
	return nil
}

func (e TrendType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
