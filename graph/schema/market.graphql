type MarketBalance {
    miner: Address!
    balance: FIL!
    balances: [WalletBalance!]
}

type WalletBalance {
    address: Address!
    balance: FIL!
}

type MarketMk12StorageAsk {
  spId: Address!
  price: Int!
  verifiedPrice: Int!
  minSize: Int!
  maxSize: Int!
  createdAt: Int!
  expiry: Int!
  sequence: Int!
}

input MarketMk12StorageAskInput {
  spId: Address!
  price: Int!
  verifiedPrice: Int!
  minSize: Int!
  maxSize: Int!
  expiry: Int!
}

type PriceFilter {
  name: String!
  minDurationDays: Int!
  maxDurationDays: Int!
  minimumSize: Int!
  maximumSize: Int!
  price: Int!
  verified: Boolean!
}

type ClientFilter {
  name: String!
  active: Boolean!
  wallets: [Address!]!
  peers: [PeerID!]!
  pricingFilters: [String!]!
  maxDealsPerHour: Int!
  maxDealSizePerHour: Int!
  info: String!
}

input PriceFilterInput {
  name: String!
  minDurationDays: Int!
  maxDurationDays: Int!
  minimumSize: Int!
  maximumSize: Int!
  price: Int!
  verified: Boolean!
}

input ClientFilterInput {
  name: String!
  active: Boolean!
  wallets: [Address!]!
  peers: [PeerID!]!
  pricingFilters: [String!]!
  maxDealsPerHour: Int!
  maxDealSizePerHour: Int!
  info: String!
}

type MarketAllowFilter {
    wallet: Address!
    status: Boolean!
}

# type cid_gravity_status
type CidGravityStatus {
  miner: Address!
  status: Boolean!
}

type DefaultFilterBehaviour {
  allowDealsFromUnknownClients: Boolean!
  isDealRejectedWhenCidGravityNotReachable: Boolean!
  isCidGravityEnabled: [CidGravityStatus!]!
}

extend type Query {
    marketBalance(miner: Address!): MarketBalance @hasRole(role: USER)
    marketBalances: [MarketBalance!] @hasRole(role: USER)
    marketMk12StorageAsks: [MarketMk12StorageAsk] @hasRole(role: USER)
    marketMk12StorageAsk(spId: Address!): MarketMk12StorageAsk @hasRole(role: USER)
    marketMk12StorageAsksCount: Int! @hasRole(role: USER)
    makretPriceFilters: [PriceFilter!] @hasRole(role: USER)
    marketPriceFilter(name: String!): PriceFilter @hasRole(role: USER)
    marketCheckPriceFilter(name: String!): Boolean! @hasRole(role: USER)
    marketClientFilters: [ClientFilter!] @hasRole(role: USER)
    marketClientFilter(name: String!): ClientFilter @hasRole(role: USER)
    marketCheckClientFilter(name: String!): Boolean! @hasRole(role: USER)
    marketAllowFilters: [MarketAllowFilter!] @hasRole(role: USER)
    marketAllowFilter(wallet: Address!): MarketAllowFilter @hasRole(role: USER)
    marketDefaultFilterBehaviour: DefaultFilterBehaviour @hasRole(role: USER)
}

extend type Mutation {
    marketAddBalance(miner: Address!, wallet: Address!, amount: FIL!): MarketBalance @hasRole(role: ADMIN)
    updateMarketMk12StorageAsk(input: MarketMk12StorageAskInput!): MarketMk12StorageAsk @hasRole(role: OPERATOR)
    marketAddPriceFilter(input: PriceFilterInput!): Boolean! @hasRole(role: OPERATOR)
    marketUpdatePriceFilter(input: PriceFilterInput!): PriceFilter @hasRole(role: OPERATOR)
    marketDeletePriceFilter(name: String!): Boolean! @hasRole(role: OPERATOR)
    marketAddClientFilter(input: ClientFilterInput!): Boolean! @hasRole(role: OPERATOR)
    marketUpdateClientFilter(input: ClientFilterInput!): ClientFilter @hasRole(role: OPERATOR)
    marketDeleteClientFilter(name: String!): Boolean! @hasRole(role: OPERATOR)
    marketToggleClientFilter(name: String!): Boolean! @hasRole(role: OPERATOR)
    marketSetAllowFilter(wallet: Address!, status: Boolean!): MarketAllowFilter @hasRole(role: OPERATOR)
    marketDeleteAllowFilter(wallet: Address!): Boolean! @hasRole(role: OPERATOR)
    marketToggleAllowFilter(wallet: Address!): Boolean! @hasRole(role: OPERATOR)
}
