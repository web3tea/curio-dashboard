type Sector {
    id: ID! @goField(forceResolver: true) @goTag(key: "db", value: "-")
    spID: Address!
    sectorNum: Int!
    status: TaskStatus! @goField(forceResolver: true)
    meta: SectorMeta @goField(forceResolver: true)
    porep: Porep @goField(forceResolver: true)
    locations: [SectorLocation]! @goField(forceResolver: true)
    pieces: [SectorMetaPiece]! @goField(forceResolver: true)
    tasks: [Task]! @goField(forceResolver: true)
    events: [TaskHistory]! @goField(forceResolver: true)
}

type SectorMeta {
    id: String! @goField(forceResolver: true) @goTag(key: "db", value: "-")
    spId: Address!
    sectorNum: Int!
    regSealProof: Int!
    ticketEpoch: Int!
    ticketValue: Bytes
    origSealedCid: String!
    origUnsealedCid: String!
    curSealedCid: String!
    curUnsealedCid: String!
    msgCidPrecommit: NullString!
    msgCidCommit: NullString!
    msgCidUpdate: NullString!
    seedEpoch: Int!
    seedValue: Bytes
    expirationEpoch: NullInt64!
    isCC: Boolean!
    deadline: NullInt64!
    partition: NullInt64!
}

type OpenSectorPiece {
    spID: Address!
    sectorNumber: Int!
    pieceIndex: Int!
    pieceCID: String!
    pieceSize: Int!
    dataURL: String!
    dataHeaders: JSON!
    dataRawSize: Int!
    dataDeleteOnFinalize: Boolean!
    f05PublishCID: String
    f05DealID: Int
    f05DealProposal: JSON
    f05DealStartEpoch: Int
    f05DealEndEpoch: Int
    directStartEpoch: Int
    directEndEpoch: Int
    directPieceActivationManifest: JSON
    createdAt: Time!
    isSnap: Boolean!
}

type SectorLocation {
    minerId: Address!
    sectorNum: Int!
    sectorFiletype: Int!
    storageId: String!
    isPrimary: NullBool!
    readTs: NullString!
    readRefs: Int!
    writeTs: NullString!
    writeLockOwner: NullString!
    storage: Storage @goField(forceResolver: true) @goTag(key: "db", value: "-")
}


type SectorMetaPiece {
    spID: Address!
    sectorNum: Int!
    pieceNum: Int!
    pieceCID: String!
    pieceSize: Int!
    requestedKeepData: Boolean!
    rawDataSize: Int
    startEpoch: Int
    origEndEpoch: Int
    f05DealID: Int
    ddoPam: JSON
    f05DealProposal: JSON
}

type SectorSummary {
    active: Int!
    sealing: Int!
    failed: Int!
}

type SectorSnapPipeline {
    spID: Address!
    sectorNumber: Int!
    startTime: Time!
    upgradeProof: Int!
    dataAssigned: Boolean!
    updateUnsealedCid: String
    updateSealedCid: String
    taskIdEncode: Int
    afterEncode: Boolean!
    proof: Bytes
    taskIdProve: Int
    afterProve: Boolean!
    proveMsgCid: String
    taskIdSubmit: Int
    afterSubmit: Boolean!
    afterProveMsgSuccess: Boolean!
    proveMsgTsk: Bytes
    taskIdMoveStorage: Int
    afterMoveStorage: Boolean!
    failed: Boolean!
    failedAt: Time
    failedReason: String!
    failedReasonMsg: String!
    submitAfter: Time
    updateReadyAt: Time
    meta: SectorMeta @goField(forceResolver: true)
    pieces: [SectorSnapPiece]! @goField(forceResolver: true)
}

type SectorSnapPiece {
    spID: Address!
    sectorNumber: Int!
    createdAt: Time!
    pieceIndex: Int!
    pieceCid: String!
    pieceSize: Int!
    dataUrl: String!
    dataHeaders: JSON!
    dataRawSize: Int!
    dataDeleteOnFinalize: Boolean!
    directStartEpoch: Int
    directEndEpoch: Int
    directPieceActivationManifest: JSON
}

type SnapSummary {
    encoding: Int!
    proving: Int!
    submitting: Int!
    moveStorage: Int!
    failed: Int!
    completed: Int!
}

extend type Query {
    sectors(actor: Address, sectorNumber: Int, offset: Int!, limit: Int!): [Sector] @hasRole(role: USER)
    sectorsCount(actor: Address): Int! @hasRole(role: USER)
    sector(actor: Address!, sectorNumber: Int!): Sector @hasRole(role: USER)
    sectorSummary: SectorSummary @hasRole(role: USER)
    snapSectors(actor: Address, sectorNumber: Int, offset: Int!, limit: Int!): [SectorSnapPipeline] @hasRole(role: USER)
    snapSectorsCount(actor: Address): Int! @hasRole(role: USER)
    snapSummary: SnapSummary @hasRole(role: USER)
}

extend type Mutation {
    removeSector(miner: Address!, sectorNumber: Int!): Boolean! @hasRole(role: OPERATOR)
    restartSector(miner: Address!, sectorNumber: Int!): Boolean! @hasRole(role: OPERATOR)
    restartAllFailedSectors: Boolean! @hasRole(role: OPERATOR)
}
